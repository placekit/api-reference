openapi: 3.0.3
info:
  title: PlaceKit API Reference
  description: |
    [PlaceKit](https://placekit.io) is a worldwide geocoding API providing fast and accurate address autocomplete, store locator, and two-way geocoding for your app.

    PlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))
  termsOfService: https://placekit.io/terms
  contact:
    name: API Support
    email: support@placekit.io
    url: https://api.placekit.co
  version: 1.2.0
servers:
- url: https://api.placekit.co
security:
- api_key: []
tags: 
  - name: Geocoding
    description: |
      PlaceKit Geocoding API endpoints is composed of two similar endpoints `/search` and `/reverse`.\
      API clients are simple wrappers on top of this API.
  - name: Live Patching
    description: |
      PlaceKit Live Patching feature enables users to create a data validation flow to fix data errors or add new addresses to their catalog, chose their validation flow and instantly publish it to their end-users.

      A `private` API key is **required** to use Live Patching endpoints.
  - name: Keys
    description: |
      Handle your API keys programmatically.

      A `private` API key is required to use Keys endpoints.
paths:
  /search:
    post:
      summary: Search for addresses
      description: |
        Performs a forward geocoding search.

        It will return results around `coordinates` (if provided) and the best matching textual relevance.

        **It is highly recommended** to set the `countries` parameter with the country you need results from for the best accuracy and revelance possible.
        
        If your use case allows your users to search in any country, then you should ommit `countries` parameter and let the API defines the user's country by its IP.

        To have the best location accuracy, you should set `coordinates` based on your users' position.
      operationId: ForwardGeocoding
      tags: [ Geocoding ]
      requestBody:
        description: Request parameters
        required: false
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/parameters.query'
                - $ref: '#/components/schemas/parameters'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
        451:
          $ref: '#/components/responses/451'
      x-codeSamples:
      - lang: curl
        source:
          $ref: './code_samples/curl/search.yaml#/source'
      - lang: go
        source:
          $ref: './code_samples/go/search.yaml#/source'
      - lang: js
        source:
          $ref: './code_samples/js/search.yaml#/source'
      - lang: python
        source:
          $ref: './code_samples/python/search.yaml#/source'
      - lang: ruby
        source:
          $ref: './code_samples/ruby/search.yaml#/source'
      x-codegen-request-body-name: payload
  /reverse:
    post:
      summary: Reverse geocoding
      description: |
        Performs a reverse geocoding search.

        It will return the closest results around `coordinates`.

        If `coordinates` are not set, it will use the user's IP to approximate its coordinates but results will be less accurate (city level accuracy instead of street level accuracy).
      operationId: ReverseGeocoding
      tags: [ Geocoding ]
      requestBody:
        description: Request parameters
        required: false
        content:
          application/json:
            schema:
              allOf: 
                - $ref: '#/components/schemas/parameters'
                - $ref: '#/components/schemas/parameters.countryByIP'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
        451:
          $ref: '#/components/responses/451'
      x-codeSamples:
      - lang: curl
        source:
          $ref: './code_samples/curl/reverse.yaml#/source'
      - lang: go
        source:
          $ref: './code_samples/go/reverse.yaml#/source'
      - lang: js
        source:
          $ref: './code_samples/js/reverse.yaml#/source'
      - lang: python
        source:
          $ref: './code_samples/python/reverse.yaml#/source'
      - lang: ruby
        source:
          $ref: './code_samples/ruby/reverse.yaml#/source'
      x-codegen-request-body-name: payload
  /patch/search:
    post:
      summary: List patch records
      description: |
        Get all patch records associated to the user.

        You can refine the results by using the same parameters as the regular `/search` endpoint.
      operationId: SearchPatches
      tags: [ Live Patching ]
      requestBody:
        description: Request parameters (optional)
        required: false
        content:
          application/json:
            schema:
              type: object
              allOf: 
                - $ref: '#/components/schemas/parameters.status'
                - $ref: '#/components/schemas/parameters.query'
                - $ref: '#/components/schemas/parameters'
                - $ref: '#/components/schemas/parameters.offset'
            examples:
              status:
                summary: Filter by status
                description: Select all `pending` patch records
                value:
                  status: pending
              query:
                summary: Advanced filtering
                value:
                  status: approved
                  query: London
                  types: ['city']
                  countries: ['fr', 'gb']
                  maxResults: 20
      responses:
        200:
          $ref: '#/components/responses/200.patch.search'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
  /patch:
    post:
      summary: Create a new patch record
      description: |
        To create a new patch record, you must provide all the required properties.
      operationId: CreatePatch
      tags: [ Live Patching ]
      requestBody:
        description: Request parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - record
              properties: 
                record:
                  required: 
                    - name
                    - city
                    - county
                    - administrative
                    - country
                    - countrycode
                    - zipcode
                    - population
                    - coordinates
                    - type
                  allOf: 
                    -  $ref: '#/components/schemas/record'
                status:
                  type: string
                  default: pending
                  description: |
                    Status of the current patch record.\
                    `pending`: the admin will need to validate the data. Once approved, the patch record will be avaiable to end-users.\
                    `approved`: the patch record will be immediately available to end-users.
                  example: pending
                  enum:
                  - pending
                  - approved
                language:
                  type: string
                  description: |
                    [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\
                    Specify the language in which the patch record is written.
                  example: en
            examples:
              datafix:
                summary: Create a new patch record
                description: Create a new patch record
                value:
                  record:
                    name: Avenue New Road
                    city: Rome
                    county: Roma Capitale
                    administrative: Lazio
                    country: Italy
                    countrycode: it
                    zipcode: ['00137']
                    population: 2776362
                    coordinates: 41.9518005, 12.5644911
                    type: street
                  status: pending
      responses:
        200:
          $ref: '#/components/responses/200.patch'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
    put:
      summary: Fix an existing record
      description: |
        To fix an existing record, you must provide the exact record you want to fix as the `origin` object.\
        You must also provide at least one of the property you want to modify in `update`.

        If you want your patch record to be immediately available to your end-users, set the property `status` to `approved`.\
        Otherwise, the patch record will be marked as `pending` and will require the app owner to validate it via the Dashboard or the API.
      operationId: UpsertPatch
      tags: [ Live Patching ]
      requestBody:
        description: Request parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - origin
                - update
              properties: 
                origin:
                  required: 
                    - name
                    - city
                    - county
                    - administrative
                    - country
                    - countrycode
                    - zipcode
                    - population
                    - coordinates
                    - type
                  allOf: 
                    -  $ref: '#/components/schemas/record'
                update:
                  description: At least one property is necessary.
                  minProperties: 1 
                  $ref: '#/components/schemas/record'
                status:
                  type: string
                  default: pending
                  description: |
                    Status of the current patch record.\
                    `pending`: the admin will need to validate the data. Once approved, the patch record will be avaiable to end-users.\
                    `approved`: the patch record will be immediately available to end-users.
                  example: pending
                  enum:
                  - pending
                  - approved
                language:
                  type: string
                  description: |
                    [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\
                    Specify the language in which the patch record is written.
                  example: en
            examples:
              datafix:
                summary: Edit a record
                description: Edit a record
                value:
                  origin:
                    name: Avenue des Champs Élysées
                    city: Paris 8e Arrondissement
                    county: Paris
                    administrative: Île-de-France
                    country: France
                    countrycode: fr
                    zipcode: ['75008']
                    population: 2220445
                    coordinates: 48.871086, 2.3036339
                    type: street
                  update:
                    name: rue des Nouveaux Champs Élysées
                    zipcode: ['75020']
                  status: pending
      responses:
        200:
          $ref: '#/components/responses/200.patch'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          description: The provided `origin` record could not be found
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
  /patch/{id}:
    get:
      summary: Get a patch record
      operationId: GetPatch
      tags: [ Live Patching ]
      parameters: 
        - $ref: '#/components/parameters/patch.id'
        - $ref: '#/components/parameters/patch.language'
      responses: 
        200:
          $ref: '#/components/responses/200.patch'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          description: The provided patch record `id` could not be found
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
    patch: 
      summary: Edit a patch record
      operationId: UpdatePatch
      tags: [ Live Patching ]
      parameters: 
        - $ref: '#/components/parameters/patch.id'
      requestBody:
        description: Request parameters
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: 
                update:
                  description: At least one property is necessary.
                  minProperties: 1 
                  $ref: '#/components/schemas/record'
                status:
                  type: string
                  description: |
                    Status of the current data fix.\
                    `pending`: the admin will need to validate the data. Once approved, the patch record will be avaiable to end-users.\
                    `approved`: the patch record will be immediately available to end-users.
                  example: pending
                  enum:
                  - pending
                  - approved
                language:
                  type: string
                  description: |
                    [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\
                    Specify the language in which the patch record is written.
                  example: en
            examples:
              status:
                summary: Update patch record status
                value:
                  status: approved
              datafix:
                summary: Update patch record property
                value:
                  update:
                    name: Rue des Nouveaux Champs Élysées
      responses: 
        204:
          $ref: '#/components/responses/204'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          description: The provided patch record `id` could not be found
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
    delete:
      summary: Delete a patch record
      operationId: DeletePatch
      tags: [ Live Patching ]
      parameters: 
        - $ref: '#/components/parameters/patch.id'
      responses:
        204:
          $ref: '#/components/responses/204'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          description: The provided patch record `id` could not be found
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
  /patch/{id}/language/{language}:
    delete: 
      summary: Delete a patch record translation
      operationId: DeletePatchLanguage
      tags: [ Live Patching ]
      parameters: 
        - $ref: '#/components/parameters/patch.id'
        - name: language
          in: path
          required: true
          description: |
            [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\
            Delete patch record language translation. There must be at least another translation available.
          schema: 
            type: string
            format: ISO-639-1
      responses:
        204:
          $ref: '#/components/responses/204'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          description: The provided patch record `id` could not be found
        409:
          description: Deletion impossible. There must be at least another translation available
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
  /keys:
    get:
      summary: List API keys
      description: Get all API keys associated to the current key's app.
      operationId: GetKeys
      tags: [ Keys ]
      responses:
        200:
          description: Key operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/key'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
    post:
      summary: Create an API key
      description: Get all API keys associated to the current key's app.
      operationId: CreateKey
      tags: [ Keys ]
      requestBody:
        description: Request parameters
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: 
                role:
                  type: string
                  default: public
                  description: |
                    Public API keys are <b>read-only</b> and are expected to be exposed to the browser.\
                    A `public` API key can only perform Geocoding operations.\
                    It is <b>highly recommended</b> to set `domains` when a `public` API key is in use.

                    Private API keys are <b>read and write</b> and are meant to be used for admin use.\
                    A `private` API key can perform all operations.
                  enum:
                    - public
                    - private
                domains:
                  type: array
                  uniqueItems: true
                  items:
                    type: string
                    format: FQDN | IPv4 | IPv6
                  description: Allow list of domains or IPs from which the requests to the API are allowed. 
                  example: "['dev.domain.com', '82.123.239.43', 'my.domain.io']"
      responses:
        200:
          $ref: '#/components/responses/200.key'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
  /keys/{id}:
    get:
      summary: Get an API key
      operationId: GetKey
      tags: [ Keys ]
      parameters: 
        - $ref: '#/components/parameters/key.id'
      responses:
        200:
          $ref: '#/components/responses/200.key'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
    patch:
      summary: Update API key domains
      operationId: UpdateKey
      tags: [ Keys ]
      parameters: 
        - $ref: '#/components/parameters/key.id'
      requestBody:
        description: Request parameters
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: 
                domains:
                  type: array
                  uniqueItems: true
                  items:
                    type: string
                    format: FQDN | IPv4 | IPv6
                  description: Allow list of domains or IPs from which the requests to the API are allowed. 
                  example: "['dev.domain.com', '82.123.239.43', 'my.domain.io']"
      responses:
        200:
          $ref: '#/components/responses/200.key'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
    delete:
      summary: Delete an API key
      operationId: DeleteKey
      tags: [ Keys ]
      parameters: 
        - $ref: '#/components/parameters/key.id'
      responses:
        200:
          description: API key deleted permanently.
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'

components:
  parameters: 
    patch.id:
      name: id
      in: path
      required: true
      description: Patch record unique identifier
      schema: 
        type: string
        format: md5
    patch.language:
      name: language
      in: query
      required: false
      description: |
        [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\
        Default results are in their original language.\
        By setting this parameter, you can change the language of the record, _if_ the translation is available.
      schema: 
        type: string
        format: ISO-639-1
    key.id:
      name: id
      in: path
      required: true
      description: Key unique identifier
      schema: 
        type: string
        example: cln0clovg0001xpeh5oxv9tfs
  schemas:
    parameters:
      type: object
      properties:
        countries:
          type: array
          description: |
            Array of [two-letter ISO 3166-1 alpha-2 country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            Limit the results to given countries.\
            Select only one country for the best results.\
            If not set, the API automatically selects the user's country defined by its IP.
          example: ['fr']
          items:
            type: string
        language:
          type: string
          description: |
            [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\
            Default results are in their original language.\
            By setting this parameter, you can change the language of the results, _if_ the translation is available.
          example: en
        types:
          type: array
          description: |
            Select the types of record to return.\
            Prepend with `-` to omit a type.\
            Returns all types by default.
          items:
            $ref: '#/components/schemas/types'
        maxResults:
          type: integer
          description: Maximum number of results to return.
          default: 5
          minimum: 1
          maximum: 20
        coordinates:
          type: string
          description: |
            GPS coordinates latitude and longitude.\
            Used to improve relevancy of results around the given area.
          example: 48.873662, 2.295063
        countryByIP:
          deprecated: true
          type: boolean
          default: false
          description: |
            Automatically select the country to search in via the user IP's detected location.\
            Returned results will be coming from the user's country's IP.\
            If set to `true`, the parameter `countries` acts as a fallback.
    parameters.countryByIP:
      type: object
      deprecated: true
      properties: 
        countryByIP:
          deprecated: true
          type: boolean
          default: true
          description: |
            Automatically select the country to search in via the user IP's detected location.\
            Returned results will be coming from the user's country's IP.\
            If set to `true`, the parameter `countries` acts as a fallback.
    parameters.offset:
      type: object
      properties:
        offset:
          type: integer
          description: Get paginated results starting from the offset.
          default: 0
          minimum: 0
    parameters.status:
      type: object
      properties:
        status:
          type: string
          description: Select patch records with the corresponding status.
          example: approved
          enum:
            - pending
            - approved
    parameters.query:
      type: object
      properties:
        query:
          type: string
          description: Search query terms.
          example: 42 avenue Champs Elysees Paris
          default: ''
    record:
      type: object
      properties:
        name:
          type: string
          description: Name of the current record.
          example: 42 Avenue des Champs Élysées
        city:
          type: string
          description: City name.
          example: Paris 8e Arrondissement
        county:
          type: string
          description: County name (department).
          example: Paris
        administrative:
          type: string
          description: Administrative name (region).
          example: Île-de-France
        country:
          type: string
          description: Country name.
          example: France
        countrycode:
          type: string
          description: |
            [Two-letter ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
          example: 'fr'
        zipcode:
          type: array
          description: Postcodes associated with the record.
          example:
          - '75008'
          items:
            type: string
        population:
          type: integer
          description: Population number of the record city.
          example: 2220445
        lat:
          deprecated: true
          type: number
          description: |
            Latitude value between `-90` and `90`.\
            **Use `coordinates` instead.**
          example: 48.871086
        lng:
          deprecated: true
          type: number
          description: |
            Longitude value between `-180` and `180`.\
            **Use `coordinates` instead.**
          example: 2.3036339
        coordinates:
          type: string
          description: GPS coordinates latitude and longitude of the current record.
          example: 48.871086, 2.3036339
        type:
          type: string
          description: Type of the record.
          example: street
          enum:
          - airport
          - bus
          - city
          - country
          - street
          - tourism
          - townhall
          - train
    key:
      type: object
      properties:
        id:
          type: string
          description: Key identifier.
          example: cln0clovg0001xpeh5oxv9tfs
        token:
          type: string
          description: |
            API Key used to perform operations on the API.\
            Set this key in the request header `x-placekit-api-key`.
          example: pk_OGRVIUTnuxFEJUXNECjFrZ6sdVovGz1ojygkbzGXcbM=
        appId:
          type: string
          description: App ID associated with this API key.
          example: ULIMBXTYDH
        role:
          type: string
          description: |
            Public API keys are <b>read-only</b> and are expected to be exposed to the browser.\
            A `public` API key can only perform Geocoding operations.\
            It is <b>highly recommended</b> to set `domains` when a `public` API key is in use.

            Private API keys are <b>read and write</b> and are meant to be used for admin use.\
            A `private` API key can perform all operations.
          enum:
            - public
            - private
        domains:
          type: array
          uniqueItems: true
          items:
            type: string
            format: FQDN | IPv4 | IPv6
          description: Allow list of domains or IPs from which the requests to the API are allowed. 
          example: "['dev.domain.com', '82.123.239.43', 'my.domain.io']"
        createdAt:
          type: string
          format: timestamp
          description: Timestamp when the key was created.
          example: 2023-09-26T13:23:27.077Z
        updatedAt:
          type: string
          format: timestamp
          description: Timestamp when the key was last modified.
          example: 2023-09-26T13:24:37.862Z
    patch.id:
      type: object
      properties:
        id:
          type: string
          description: Data fix identifier.
          example: c9ce0be25ff6a74405c8cfa040e5ba1f
    patch.status:
      type: object
      properties:
        status:
          type: string
          description: Patch record status.
          example: pending
    results:
      type: object
      properties:
        results:
          type: array
          items:
            allOf: 
              - type: object
                properties:
                  highlight:
                    type: string
                    description: Name of the current record with highlighted matched words.
                    example: <mark>42 Avenue</mark> des <mark>Champs Élysées</mark> 
              - $ref: '#/components/schemas/record'
        resultsCount:
          type: integer
          description: Number of items results found.
          example: 2
        maxResults:
          type: integer
          description: Maximum number of results items returned.
          example: 5
    results.query:
      type: object
      properties: 
        query:
          type: string
          description: Search text query used for this response.
          example: '42 avenue Champs Elysees Paris'
    results.offset:
      type: object
      properties:
        offset:
          type: integer
          description: Offset used for this paginated response.
          example: 0
    results.totalResults:
      type: object
      properties:
        totalResults:
          type: integer
          description: The total number of available records.
          example: 2
    types:
      type: string
      enum:
      - airport
      - -airport
      - bus
      - -bus
      - city
      - -city
      - country
      - -country
      - street
      - -street
      - tourism
      - -tourism
      - townhall
      - -townhall
      - train
      - -train
    validationError:
      type: object
      properties:
        value:
          type: string
        msg:
          type: string
        param:
          type: string
        location:
          type: string
  responses:
    200:
      description: Returns a list of matching records
      headers:
        RateLimit:
          schema:
            type: string
          description: Request limit information based on [IETF draft 7 standard](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers-07).
          example: limit=10, remaining=9, reset=1
        RateLimit-Policy:
          schema:
            type: string
          description: Request limit policy based on [IETF draft 7 standard](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers-07).
          example: 10;w=1
      content:
        application/json:
          schema:
            allOf: 
              - $ref: '#/components/schemas/results'
              - $ref: '#/components/schemas/results.query'
    200.patch:
      description: Patch record successfully created
      content:
        application/json:
          schema:
            allOf: 
              - $ref: '#/components/schemas/patch.id'
              - $ref: '#/components/schemas/patch.status'
              - $ref: '#/components/schemas/record'
    200.patch.search:
      description: Returns a list of matching patch records
      content:
        application/json:
          schema:
            allOf: 
              - $ref: '#/components/schemas/results'
              - $ref: '#/components/schemas/results.offset'
              - $ref: '#/components/schemas/results.totalResults'
              - $ref: '#/components/schemas/results.query'
    200.key:
      description: Key operation successful
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/key'
    204:
      description: Patch record successfully deleted
    401:
      description: Access denied authentication failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Access denied authentication failed
    403:
      description: You are not authorized to access this resource
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: You are not authorized to access this resource
    404:
      description: Route not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Route not found
    412:
      description: Access denied missing credentials
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Access denied missing credentials
    422:
      description: Invalid body parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Invalid body parameters. Check the API documentation: https://api.placekit.io/'
              errors:
                type: array
                items: 
                  $ref: '#/components/schemas/validationError'
                example:
                  - value: 42
                    msg: Must be an integer between 1 and 20 included.
                    param: maxResults
                    location: body
                  - value: sx
                    msg: This country is not supported. Contact us if you need it.
                    param: countries[0]
                    location: body
    429:
      description: Too many requests from this IP, please try again in a minute
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Too many requests from this IP, please try again in a minute
              status:
                type: integer
                example: 429
    451:
      description: Access denied fair usage policy violation
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Access denied: application is violating PlaceKit Fair Usage Policy https://placekit.io/terms/fup.'
  securitySchemes:
    api_key:
      type: apiKey
      description: Generate your API key in the [app settings](https://app.placekit.io/).
      name: x-placekit-api-key
      in: header
