openapi: 3.0.3
info:
  title: PlaceKit API Reference
  description: |
    [PlaceKit](https://placekit.io) is a worldwide geocoding API providing fast and accurate address autocomplete, store locator, and two-way geocoding for your app.

    PlaceKit OpenAPI Specifications ([repository](https://github.com/placekit/api-reference))
  termsOfService: https://placekit.io/terms
  contact:
    name: API Support
    email: support@placekit.io
    url: https://api.placekit.co
  version: 1.0.0
servers:
- url: https://api.placekit.co
security:
- api_key: []
tags: 
  - name: Geocoding
    description: |
      PlaceKit Geocoding API endpoints is composed of two similar endpoints `/search` and `/reverse`.\
      API clients are simple wrappers on top of this API.
  - name: Live Patching
    description: |
      PlaceKit Live Patching enables users to create a data validation flow in order to fix error or add new addresses, chose your validation flow and instantly publish it for your end-users.\

      **Required**: A `private`` API key is required to use Live Patching endpoints.
paths:
  /search:
    post:
      summary: Search for addresses
      description: |
        Performs a forward geocoding search.

        It will return results around `coordinates` (if provided) and the best matching textual relevance.

        **It is highly recommended** to set the `countries` parameter with the country you need results from for the best accuracy and revelance possible.
      operationId: search
      tags: [ Geocoding ]
      requestBody:
        description: Request parameters
        required: false
        content:
          application/json:
            schema:
              required: 
                - countries
              allOf:
                - $ref: '#/components/schemas/parameters.query'
                - $ref: '#/components/schemas/parameters'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
      x-codeSamples:
      - lang: curl
        source:
          $ref: code_samples/curl/search.sh
      - lang: go
        source:
          $ref: code_samples/go/search.go
      - lang: js
        source:
          $ref: code_samples/js/search.js
      - lang: python
        source:
          $ref: code_samples/python/search.py
      - lang: ruby
        source:
          $ref: code_samples/ruby/search.rb
      x-codegen-request-body-name: payload
  /reverse:
    post:
      summary: Reverse geocoding
      description: |
        Performs a reverse geocoding search.

        It will return the closest results around `coordinates`.\
        If `coordinates` are not set, it will use the user's IP to approximate its coordinates but results will be less accurate (city level accuracy instead of street level accuracy).
      operationId: reverse
      tags: [ Geocoding ]
      requestBody:
        description: Request parameters
        required: false
        content:
          application/json:
            schema:
              required: 
                - countries
              allOf: 
                - $ref: '#/components/schemas/parameters'
                - $ref: '#/components/schemas/parameters.countryByIP'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
      x-codeSamples:
      - lang: curl
        source:
          $ref: code_samples/curl/reverse.sh
      - lang: go
        source:
          $ref: code_samples/go/reverse.go
      - lang: js
        source:
          $ref: code_samples/js/reverse.js
      - lang: python
        source:
          $ref: code_samples/python/reverse.py
      - lang: ruby
        source:
          $ref: code_samples/ruby/reverse.rb
      x-codegen-request-body-name: payload
  /patch:
    get: 
      summary: Retrieve data fixes
      description: |
        Get all data fixes associated to the current app.
      tags: [ Live Patching ]
      requestBody:
        description: Request parameters
        required: false
        content:
          application/json:
            schema:
              type: object
              allOf: 
                - $ref: '#/components/schemas/parameters.status'
                - type: object
                  properties:
                    maxResults:
                      type: integer
                      description: Maximum number of results to return.
                      default: 5
                      minimum: 1
                      maximum: 20
      responses:
        200:
          $ref: '#/components/responses/200.patch'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
    post:
      summary: Retrieve data fixes
      description: |
        Get all data fixes associated to the current app.\

        You can refine the results by using the same parameters as the regular `/search` endpoint.
      tags: [ Live Patching ]
      requestBody:
        description: Request parameters
        required: false
        content:
          application/json:
            schema:
              type: object
              allOf: 
                - type: object
                  properties:
                    status:
                      type: string
                      default: all
                      description: Select data fixes with the corresponding status.
                      example: approved
                      enum:
                      - all
                      - pending
                      - approved
                - $ref: '#/components/schemas/parameters.query'
                - $ref: '#/components/schemas/parameters'
            examples:
              status:
                summary: Filter by status
                description: Filter by `pending` data fixes
                value:
                  status: pending
              query:
                summary: Advanced filtering
                value:
                  status: approved
                  query: London
                  types: ['city']
                  countries: ['fr', 'gb']
                  maxResults: 20
      responses:
        200:
          $ref: '#/components/responses/200.patch'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
    put:
      summary: Create a data fix
      description: |
        To create a data fix, you must provide the exact entity you want to fix as the `origin` object.\
        You must also provide at least one of the property you want to modify in `update`.

        If you want your data fixes to be immediately available to your end-users, set the property `status` to `approved`.\
        Otherwise, the data fix will be marked as `pending` and will require the app owner to validate it first via the Dashboard or the API.
      tags: [ Live Patching ]
      requestBody:
        description: Request parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - origin
                - update
              properties: 
                origin:
                  required: 
                    - name
                    - city
                    - county
                    - administrative
                    - country
                    - countrycode
                    - zipcode
                    - population
                    - lat
                    - lng
                    - type
                  allOf: 
                    -  $ref: '#/components/schemas/entity'
                update:
                  description: At least one property is necessary.
                  minProperties: 1 
                  $ref: '#/components/schemas/entity'
                status:
                  type: string
                  default: pending
                  description: |
                    Status of the current data fix.\
                    `pending`: admin will need to validate the data. Once approved, data fix will be avaiable to end-users.\
                    `approved`: data fix will immediately be available to end-users.
                  example: pending
                  enum:
                  - pending
                  - approved
                language:
                  type: string
                  description: |
                    [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\
                    Specify the language in which the data fix is written.
                  example: fr
                  enum:
                  - en
                  - fr
            examples:
              datafix:
                summary: create
                description: create
                value:
                  origin:
                    name: Avenue des Champs Élysées
                    city: Paris 8e Arrondissement
                    county: Paris
                    administrative: Île-de-France
                    country: France
                    countrycode: fr
                    zipcode: ['75008']
                    population: 2220445
                    lat: 48.871086
                    lng: 2.3036339
                    type: street
                  update:
                    name: rue des Nouveaux Champs Élysées
                    zipcode: ['75020']
                  status: pending
      responses:
        201:
          $ref: '#/components/responses/201'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          description: The provided `origin` entity could not be found
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
    delete:
      summary: Delete a data fix
      description: |
        To delete a data fix, you must provide the exact entity you want to delete as the `origin` object.
      tags: [ Live Patching ]
      requestBody:
        description: Request parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                -  origin
              properties: 
                origin:
                  required: 
                    - name
                    - city
                    - county
                    - administrative
                    - country
                    - countrycode
                    - zipcode
                    - population
                    - lat
                    - lng
                    - type
                  allOf: 
                    - $ref: '#/components/schemas/entity'
      responses:
        204:
          $ref: '#/components/responses/204'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          description: The provided `origin` entity could not be found
        412:
          $ref: '#/components/responses/412'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
components:
  schemas:
    parameters:
      type: object
      properties:
        countries:
          type: array
          description: |
            Array of [two-letter ISO 3166-1 alpha-2 country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            Limit the results to given countries.\
            Select only one country for the best results.
          example: ['fr']
          items:
            type: string
        language:
          type: string
          description: |
            [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\
            Default results are in their original language.\
            By setting this parameter, you can change the language of the results, if the translation is available.\
            Contact us if you need other languages.
          example: fr
          enum:
          - en
          - fr
        types:
          type: array
          description: |
            Select the types of record to return.\
            Prepend with `-` to omit a type.\
            Returns all types by default.
          items:
            $ref: '#/components/schemas/types'
        maxResults:
          type: integer
          description: Maximum number of results to return.
          default: 5
          minimum: 1
          maximum: 20
        coordinates:
          type: string
          description: |
            GPS coordinates latitude and longitude.\
            Used to improve relevancy of results around the given area.
          example: 48.873662, 2.295063
        countryByIP:
          type: boolean
          default: false
          description: |
            Automatically select the country to search in via the user IP's detected location.\
            Returned results will be coming from the user's country's IP.\
            If set to `true`, the parameter `countries` acts as a fallback.
    parameters.countryByIP:
      properties: 
        countryByIP:
          type: boolean
          default: true
          description: |
            Automatically select the country to search in via the user IP's detected location.\
            Returned results will be coming from the user's country's IP.\
            If set to `true`, the parameter `countries` acts as a fallback.
    parameters.query:
      properties:
        query:
          type: string
          description: Search query terms.
          example: 42 avenue Champs Elysees Paris
          default: ''
    parameters.status:
      properties:
        status:
          type: string
          default: all
          description: Filter data fixes with the corresponding status.
          example: approved
          enum:
          - all
          - pending
          - approved
    entity:
      type: object
      properties:
        name:
          type: string
          description: Name of the current entity.
          example: 42 Avenue des Champs Élysées
        city:
          type: string
          description: City name.
          example: Paris 8e Arrondissement
        county:
          type: string
          description: County name (department).
          example: Paris
        administrative:
          type: string
          description: Administrative name (region).
          example: Île-de-France
        country:
          type: string
          description: Country name.
          example: France
        countrycode:
          type: string
          description: |
            [Two-letter ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
          example: 'fr'
        zipcode:
          type: array
          description: Postcodes associated with the entity.
          example:
          - '75008'
          items:
            type: string
        population:
          type: integer
          description: Population number of the entity city.
          example: 2220445
        lat:
          type: number
          description: Latitude value between `-90` and `90`.
          example: 48.871086
        lng:
          type: number
          description: Longitude value between `-180` and `180`.
          example: 2.3036339
        type:
          type: string
          description: Type of the entity.
          example: street
          enum:
          - airport
          - bus
          - city
          - country
          - street
          - tourism
          - townhall
          - train
    results.query:
      type: object
      properties: 
        query:
          type: string
          description: Search text query used for this response.
          example: '42 avenue Champs Elysees Paris'
    results:
      type: object
      properties:
        results:
          type: array
          items:
            allOf: 
              - type: object
                properties:
                  highlight:
                    type: string
                    description: Name of the current entity with highlighted matched words.
                    example: <mark>42 Avenue</mark> des <mark>Champs Élysées</mark> 
              - $ref: '#/components/schemas/entity'
        resultsCount:
          type: integer
          description: Number of items results found.
          example: 2
        maxResults:
          type: integer
          description: Maximum number of results items returned.
          example: 5
    types:
      type: string
      enum:
      - airport
      - -airport
      - bus
      - -bus
      - city
      - -city
      - country
      - -country
      - street
      - -street
      - tourism
      - -tourism
      - townhall
      - -townhall
      - train
      - -train
    validationError:
      type: object
      properties:
        value:
          type: string
        msg:
          type: string
        param:
          type: string
        location:
          type: string
  responses:
    200:
      description: Returns a list of matching entities
      headers:
        RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per minute.
          example: 5
        RateLimit-Remaining:
          schema:
            type: integer
          description: The number of requests left for the time window.
          example: 2
        RateLimit-Reset:
          schema:
            type: integer
          description: Indicates how many seconds are left to wait before making a follow-up request. 
          example: 34
        Retry-After:
          schema: 
            type: integer
          description: Indicates how many seconds to wait before making a follow-up request.
          example: 60
      content:
        application/json:
          schema:
            allOf: 
              - $ref: '#/components/schemas/results'
              - $ref: '#/components/schemas/results.query'
    200.patch:
      description: Returns a list of matching entities
      headers:
        RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per minute.
          example: 5
        RateLimit-Remaining:
          schema:
            type: integer
          description: The number of requests left for the time window.
          example: 2
        RateLimit-Reset:
          schema:
            type: integer
          description: Indicates how many seconds are left to wait before making a follow-up request. 
          example: 34
        Retry-After:
          schema: 
            type: integer
          description: Indicates how many seconds to wait before making a follow-up request.
          example: 60
      content:
        application/json:
          schema:
            allOf: 
              - $ref: '#/components/schemas/results'
    201:
      description: Data fix successfully created
      headers:
        RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per minute.
          example: 5
        RateLimit-Remaining:
          schema:
            type: integer
          description: The number of requests left for the time window.
          example: 2
        RateLimit-Reset:
          schema:
            type: integer
          description: Indicates how many seconds are left to wait before making a follow-up request. 
          example: 34
        Retry-After:
          schema: 
            type: integer
          description: Indicates how many seconds to wait before making a follow-up request.
          example: 60
    204:
      description: Data fix successfully deleted
      headers:
        RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per minute.
          example: 5
        RateLimit-Remaining:
          schema:
            type: integer
          description: The number of requests left for the time window.
          example: 2
        RateLimit-Reset:
          schema:
            type: integer
          description: Indicates how many seconds are left to wait before making a follow-up request. 
          example: 34
        Retry-After:
          schema: 
            type: integer
          description: Indicates how many seconds to wait before making a follow-up request.
          example: 60
    401:
      description: Access denied authentication failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Access denied authentication failed
    403:
      description: You are not authorized to access this resource
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: You are not authorized to access this resource
    404:
      description: Route not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Route not found
    412:
      description: Access denied missing credentials
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Access denied missing credentials
    422:
      description: Invalid body parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Invalid body parameters. Check the API documentation: https://api.placekit.io/'
              errors:
                type: array
                items: 
                  $ref: '#/components/schemas/validationError'
                example:
                  - value: 42
                    msg: Must be an integer between 1 and 20 included.
                    param: maxResults
                    location: body
                  - value: sx
                    msg: This country is not supported. Contact us if you need it.
                    param: countries[0]
                    location: body
    429:
      description: Too many requests from this IP, please try again in a minute
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Too many requests from this IP, please try again in a minute
              status:
                type: integer
                example: 429
  securitySchemes:
    api_key:
      type: apiKey
      description: Generate your API key in the [app settings](https://app.placekit.io/).
      name: x-placekit-api-key
      in: header
